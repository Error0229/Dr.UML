@startuml openProject
autonumber
group#gold #white openProject
    autoactivate on
    participant ":UMLProject"
    
    -> ":UMLProject": openProject()
    note left of ":UMLProject" #red: by Controller
    ":UMLProject" -> ":UMLProject": diagrams = GetAvailableDiagrams()
    return
    note right of ":UMLProject" #red: by Expert (UI want to know the diagram)
    note right of ":UMLProject": GetAvailableDiagrams() returns names of diagrams in the project.

    ":UMLProject" -> ":UMLProject": lastOpenedDiagrams = GetLastOpenedDiagrams()
    note right of ":UMLProject" #red: by Expert (UI want to know the lastOpenedDiagrams)
    note right of ":UMLProject": GetLastOpenedDiagrams() returns names of diagrams that were opened last time
    return

    loop#gold #white diagramName in lastOpenedDiagrams
        ":UMLProject" --> "diagram:UMLDiagram" ** : createDiagram(diagramName)
        note right of ":UMLProject" #red: by Creator
        note right of ":UMLProject": createDiagram(path) creates a new instance of the diagram and load the diagram info at path
        participant "activeDiagrams\n:[]UMLDiagram"
        ":UMLProject" -> "activeDiagrams\n:[]UMLDiagram": append(diagram)
        return
        note right of ":UMLProject": append is a built-in function
        note right of ":UMLProject": we only load and maintain the diagrams that were opened as tabs

    return lastOpenedDiagrams, diagrams
end
@enduml


@startuml selectDiagram
autonumber
autoactivate on
group#gold #white selectDiagram
    -> ":UMLProject": selectDiagram(diagramName)
    note left of ":UMLProject" #red: by Controller
        opt#gold #white diagramName not in activeDiagrams
            note right of ":UMLProject": load the selected diamgram if it has not been loaded
            ":UMLProject" --> "diagram:UMLDiagram" ** :  createDiagram(diagramName)"
            note right of ":UMLProject" #red: by Creator
            ":UMLProject" -> ":UMLProject": activeDiagrams = append(activeDiagrams, diagram)
            note right of ":UMLProject": append is a built-in function
            return
        end
        ":UMLProject" -> ":UMLProject" : currentDiagram = activeDiagrams[diagramName]
        return
    return
end selectDiagram
@enduml


@startuml addGadgetToDiagram
autonumber
autoactivate on
group#gold #white addGadgetToDiagram
    -> ":UMLProject": addGadget(type, point)
    note left of ":UMLProject" #red: by Controller
        ":UMLProject" -> "currentDiagram\n:*UMLDiagram"  : addGadget(type, point)
            "currentDiagram\n:*UMLDiagram" --> "addCmd:AddCommand" ** : newAddGadgetCommand(type, point)
            "currentDiagram\n:*UMLDiagram" -> ":commandManager" : ExecuteCommand(addCmd)
                ":commandManager" -> "addCmd:AddCommand" : Execute()
                    "addCmd:AddCommand" -> ":Components" : addGadget(type, point)
                        ":Components"  --> "gadget:Gadget" ** : createGadget(type, point)
                        note right of ":Components" #red: by Creator
                        ":Components" -> ":Components": components = append(components, gadget)
                        note right of ":Components": append is a built-in function
                        return
                    return
                return
        return
    return
end addGadgetToDiagram
@enduml


@startuml addAssociationToDiagram
autonumber
autoactivate on
group#gold #white addAssociationToDiagram
-> ":UMLProject": startAddAssociation(point)
note left of ":UMLProject" #red: by Controller
    ":UMLProject" -> "currentDiagram\n:*UMLDiagram": startAddAssociation(point)
        "currentDiagram\n:*UMLDiagram" -> "currentDiagram\n:*UMLDiagram": startPoint = point
        return
    return
return
...
-> ":UMLProject": endAddAssociation(type, point)
    ":UMLProject" -> "currentDiagram\n:*UMLDiagram": endAddAssociation(type, point)
        "currentDiagram\n:*UMLDiagram" --> "assCmd:AddCommand" ** : newAddAssociationCommand(type, startPoint, point)
        "currentDiagram\n:*UMLDiagram" -> ":commandManager" : ExecuteCommand(assCmd)
            ":commandManager" -> "assCmd:AddCommand" : Execute()
                "assCmd:AddCommand" -> ":Components": addAssociation(type, startPoint, point)
                    ":Components" -> ":Components": parents = [findGadget(startPoint), findGadget(point)]
                    return

                    opt#gold #white both parents are not null
                        ":Components" --> "ass:Association" ** : createAssociation(type, parents)
                        note right of ":Components" #red: by Creator

                        ":Components" -> ":Components" : adjustAssociationPath(*association)
                        note right of ":Components": adjust the pathing of newly created association to prevent overlapping
                        return

                        ":Components" -> ":Components": components = append(components, ass)
                        note right of ":Components": append is a golang built-in function
                        return
                    end
                return
            return
        return
    return
return
end addAssociationToDiagram
@enduml


@startuml selectComponent
autonumber
autoactivate on
group#gold #white selectComponent
    -> ":UMLProject": selectComponent(point)
    note left of ":UMLProject" #red: by Controller
        ":UMLProject" -> "currentDiagram\n:*UMLDiagram": selectComponent(point)
            "currentDiagram\n:*UMLDiagram" -> ":Components": selectComponent(point)
            loop#gold #white component covering point
                ":Components" -> ":Components": selectedComponents = append(selectedComponents, &component)
                note right of ":Components": append is a built-in function
                return
                note right of ":Components": add component to a list of selected-component pointers
            end

            opt#gold #white only select one component
                ":Components" -> "SelectedComponent\n:Component": setupProperty()
                "SelectedComponent\n:Component" -> "SelectedComponent\n:Component": tree = createPropertyTree()
                return
                "SelectedComponent\n:Component" -> ":PropertyManager": setupProperty(tree)
                note over "SelectedComponent\n:Component": register the property of this component to property manager
                return
                return
            else
                ":Components" -> ":PropertyManager": clearProperty()
                return
            end

            return
        return
    return
end selectComponent
@enduml


@startuml unselectComponent
autonumber
autoactivate on
group#gold #white unselectComponent
    -> ":UMLProject": unselectComponent(point)
    note left of ":UMLProject" #red: by Controller
        ":UMLProject" -> "currentDiagram\n:*UMLDiagram": unselectComponent(point)
            "currentDiagram\n:*UMLDiagram" -> ":Components": unselectComponent(point)
            loop#gold #white component cover point
                ":Components" -> ":Components": delete(selectedComponents, component)
                note right of ":Components": delete is a built-in function
                return
            end

            ref over ":Components" , ":PropertyManager" : updateProperty (same logic as selectComponent)
            return
        return
    return
end unselectComponent
@enduml


@startuml unselectAllComponents
group#gold #white unselectAllComponents
autonumber
autoactivate on
    -> ":UMLProject": unselectAllComponents()
    note left of ":UMLProject" #red: by Controller
        ":UMLProject" -> "currentDiagram\n:*UMLDiagram": unselectAllComponents()
            "currentDiagram\n:*UMLDiagram" -> ":Components": unselectAllComponents()
                ":Components" -> ":Components": selectedComponents = []
                return
                ":Components" -> ":PropertyManager": clearProperty()
                return
            return
        return
    return
end unselectAll
@enduml


@startuml copyComponents
autonumber
autoactivate on
group#gold #white copyComponents
    -> ":UMLProject": CopyComponents()
    note left of ":UMLProject" #red: by Controller
        ":UMLProject" -> "currentDiagram\n:*UMLDiagram": ExportSubmodule("clipboard")
        note over ":UMLProject"
        "clipboard" is a special submodule
        containing the components user copied.
        end note
            "currentDiagram\n:*UMLDiagram" -> ":Components": ExportSubmodule("clipboard")
                ":Components" -> ":Components": exportComponents = getGroupComponents().clone()
                return
                note over ":Components": getGroupComponents() return gadgets and associations.\nAs for every association, its parents are also included.
                ":Components" -> ":Submodule":  <<static>>\nExportSubmodule("clipboard", exportCompoents)
                return
            return
        return
    return
end copyComponents
@enduml


@startuml pasteComponents
autonumber
autoactivate on
group#gold #white pasteComponents
    -> ":UMLProject": PasteComponents(point)
    note left of ":UMLProject" #red: by Controller
        ":UMLProject" -> "currentDiagram\n:*UMLDiagram": ImportSubmodule("clipboard", point)
        ref over ":UMLProject" , "currentDiagram\n:*UMLDiagram" : import submodule
        return
    return
end pasteComponents
@enduml


@startuml importSubmodule
autonumber
autoactivate on
group#gold #white importSubmodule
    -> ":UMLProject": ImportSubmodule(submoduleName, point)
    note left of ":UMLProject" #red: by Controller
        ":UMLProject" -> "currentDiagram\n:*UMLDiagram": ImportSubmodule(submoduleName, point)
            "currentDiagram\n:*UMLDiagram" -> ":Components": ImportSubmodule(submoduleName, point)
            ":Components" -> ":Submodule":  <<static>>\nimportCompnents = ImportSubmodule(submoduleName)
            return
            note right of ":Components" #red:y by Expert (components class wants to know the components in that submodule)
            loop#gold #white component in importComponents
                ":Components" -> "component:Component": moveDelta(point)
                return
                ":Components" -> ":Components": components = append(components, component)
                note right of ":Components": append is a built-in function
                return
            end
            return
        return
    return
end importSubmodule
@enduml


@startuml updateProperty
autonumber
autoactivate on
group#gold #white updateProperty
     -> ":UMLProject": updateProperty(name, value)
    note left of ":UMLProject" #red: by Controller
    ":UMLProject" -> ":propertyManager": updateProperty(name, value)
    note over ":UMLProject", ":propertyManager"
    updateProperty(name, value) will 🪄update the property of the selected component.
    end note
    return

    return
end updateProperty
@enduml


@startuml undo
/'undo'/
autoactivate on
group#gold #white undo
    -> ":UMLProject" : undo()
    note left of ":UMLProject" #red: by Controller
        ":UMLProject" -> "currentDiagram:UMLDiagram" : undo()
        note right
        UMLDiagram::undo() {
            if (undoDeque.size() > 0) {
                auto& command = undoDeque.top();
                this->doCommand(command, true);
                undoDeque.pop();
                redoDeque.push(command);
            }
        }
        end note
        return
    return
end undo
@enduml


@startuml redo
/'redo'/
autoactivate on
group#gold #white redo
    -> ":UMLProject" : redo()
    note left of ":UMLProject" #red: by Controller
        ":UMLProject" -> "currentDiagram:UMLDiagram" : redo()
        note right
        UMLDiagram::undo() {
            if (redoDeque.size() > 0) {
                auto& command = redoDeque.top();
                this->doCommand(command);
                redoDeque.pop();
                undoDeque.push(command);
            }
        }
        end note
        return
    return
end undo
@enduml


@startuml deleteComponent
autonumber
autoactivate on
group#gold #white deleteComponent
    -> ":UMLProject": DeleteComponent()
    note left of ":UMLProject" #red: by Controller
        ":UMLProject" -> "currentDiagram\n:*UMLDiagram": DeleteComponent()
            "currentDiagram\n:*UMLDiagram" --> "delCmd:DeleteCommand" ** : newDeleteCommand(selectedComponents)
            "currentDiagram\n:*UMLDiagram" -> ":commandManager" : ExecuteCommand(delCmd)
                ":commandManager" -> "delCmd:DeleteCommand" : Execute()
                    "delCmd:DeleteCommand" -> ":Components": DeleteComponent()

                    ":Components" -> ":Components": removeComponents = getGroupComponents()
                    return
                    note right
                    ":Components": getGroupComponents() return gadgets and associations.
                    As for every association, its parents are also included.
                    end note
                    loop#gold #white component in removeComponents
                        ":Components" -> ":Components": delete(component)
                        note right of ":Components": delete is a built-in function
                        return
                    end
                    return
                return
            return
        return
    return
end deleteComponent
@enduml


@startuml moveComponent
autonumber
autoactivate on
group#gold #white moveComponent

-> ":UMLProject" : StartDragging(point)
note left of ":UMLProject" #red: by Controller
    ":UMLProject" -> "currentDiagram:*UMLDiagram" : StartDragging(point)
        "currentDiagram:*UMLDiagram" -> "currentDiagram:*UMLDiagram" : moveStartPoint = point
        return
    return
return
...

->":UMLProject" : StopDragging(point)
note left of ":UMLProject" #red: by Controller
    ":UMLProject" -> "currentDiagram:*UMLDiagram" : StopDragging(point)
        "currentDiagram:*UMLDiagram" -> ":Components" : MoveSelectedComponents(point - moveStartPoint)
            loop#gold component in selectedComponents
                opt#gold #white component is a gadget
                    ":Components" -> "component:Component" : moveDelta(delta)
                    note over ":Components" , "component:Component"
                    For a gadget, move it by delta.
                    For an association, it will automatically reroute if either of parents is moved.
                    (By subscribing to the events of its connected gadgets)
                    end note
                    return
                end
            end loop
        return
        "currentDiagram:*UMLDiagram" -> "currentDiagram:*UMLDiagram": moveStartPoint = 0
        return
    return
return
end moveComponent
@enduml


@startuml
autonumber
autoactivate on
group#gold #white drawAll
-> ":UMLProject": drawAll(graphic)
    ":UMLProject" -> "currentDiagram:*UMLDiagram": drawAll(graphic)
        "currentDiagram:*UMLDiagram" -> ":Components": drawAll(graphic)
            loop#gold #white component in components
                alt#gold #white component is a gadget
                    ":Components" -> "gadget:Component": draw(graphic)
                    return
                else
                    ":Components" -> "association:Component": parents = getParents()
                    return
                    ":Components" -> ":Components": routeMap[parents]++ 
                    note right of ":Components": routeMap is to assist in drawing the association
                    return
                end
            end
            loop#gold #white component in components
                opt#gold #white component is a association
                    ":Components" -> "association:Component": parents = getParents()
                    return
                    ":Components" -> "association:Component": draw(graphic, routeMap[parents]--)
                    return
                end
            end
        return
    return
return
end drawAll
@enduml


' ❌*d When User drags Gadget with multiple Associations, System will automatically arrange them
' ❌4.e User can modify the path of an Association
